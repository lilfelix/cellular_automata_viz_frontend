(()=>{var e={157:function(e,t,r){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&s(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StateServiceClient=void 0;var n=o(r(282)),a=o(r(617)),p=function(){function e(e,t,r){this.methodDescriptorInitWorldState=new n.MethodDescriptor("/sim_server.StateService/InitWorldState",n.MethodType.UNARY,a.InitializeRequest,a.WorldStateResponse,(function(e){return e.serializeBinary()}),a.WorldStateResponse.deserializeBinary),this.methodDescriptorStepWorldStateForward=new n.MethodDescriptor("/sim_server.StateService/StepWorldStateForward",n.MethodType.UNARY,a.StepRequest,a.WorldStateResponse,(function(e){return e.serializeBinary()}),a.WorldStateResponse.deserializeBinary),this.methodDescriptorStartSimulation=new n.MethodDescriptor("/sim_server.StateService/StartSimulation",n.MethodType.UNARY,a.StartSimulationRequest,a.SimulationResultResponse,(function(e){return e.serializeBinary()}),a.SimulationResultResponse.deserializeBinary),r||(r={}),t||(t={}),r.format="binary",this.client_=new n.GrpcWebClientBase(r),this.hostname_=e.replace(/\/+$/,""),this.credentials_=t,this.options_=r}return e.prototype.initWorldState=function(e,t,r){return void 0!==r?this.client_.rpcCall(this.hostname_+"/sim_server.StateService/InitWorldState",e,t||{},this.methodDescriptorInitWorldState,r):this.client_.unaryCall(this.hostname_+"/sim_server.StateService/InitWorldState",e,t||{},this.methodDescriptorInitWorldState)},e.prototype.stepWorldStateForward=function(e,t,r){return void 0!==r?this.client_.rpcCall(this.hostname_+"/sim_server.StateService/StepWorldStateForward",e,t||{},this.methodDescriptorStepWorldStateForward,r):this.client_.unaryCall(this.hostname_+"/sim_server.StateService/StepWorldStateForward",e,t||{},this.methodDescriptorStepWorldStateForward)},e.prototype.startSimulation=function(e,t,r){return void 0!==r?this.client_.rpcCall(this.hostname_+"/sim_server.StateService/StartSimulation",e,t||{},this.methodDescriptorStartSimulation,r):this.client_.unaryCall(this.hostname_+"/sim_server.StateService/StartSimulation",e,t||{},this.methodDescriptorStartSimulation)},e}();t.StateServiceClient=p},617:(e,t,r)=>{var s=r(459),i=s,o="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof window&&window||void 0!==o&&o||"undefined"!=typeof self&&self||function(){return this}.call(null)||Function("return this")();i.exportSymbol("proto.sim_server.GridDimensions",null,o),i.exportSymbol("proto.sim_server.InitializeRequest",null,o),i.exportSymbol("proto.sim_server.Metadata",null,o),i.exportSymbol("proto.sim_server.SimulationResultResponse",null,o),i.exportSymbol("proto.sim_server.StartSimulationRequest",null,o),i.exportSymbol("proto.sim_server.StepRequest",null,o),i.exportSymbol("proto.sim_server.Vector2D",null,o),i.exportSymbol("proto.sim_server.Vector3D",null,o),i.exportSymbol("proto.sim_server.WorldStateResponse",null,o),proto.sim_server.Metadata=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.Metadata,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.Metadata.displayName="proto.sim_server.Metadata"),proto.sim_server.Vector3D=function(e){s.Message.initialize(this,e,0,-1,proto.sim_server.Vector3D.repeatedFields_,null)},i.inherits(proto.sim_server.Vector3D,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.Vector3D.displayName="proto.sim_server.Vector3D"),proto.sim_server.Vector2D=function(e){s.Message.initialize(this,e,0,-1,proto.sim_server.Vector2D.repeatedFields_,null)},i.inherits(proto.sim_server.Vector2D,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.Vector2D.displayName="proto.sim_server.Vector2D"),proto.sim_server.GridDimensions=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.GridDimensions,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.GridDimensions.displayName="proto.sim_server.GridDimensions"),proto.sim_server.InitializeRequest=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.InitializeRequest,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.InitializeRequest.displayName="proto.sim_server.InitializeRequest"),proto.sim_server.StepRequest=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.StepRequest,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.StepRequest.displayName="proto.sim_server.StepRequest"),proto.sim_server.WorldStateResponse=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.WorldStateResponse,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.WorldStateResponse.displayName="proto.sim_server.WorldStateResponse"),proto.sim_server.StartSimulationRequest=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.StartSimulationRequest,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.StartSimulationRequest.displayName="proto.sim_server.StartSimulationRequest"),proto.sim_server.SimulationResultResponse=function(e){s.Message.initialize(this,e,0,-1,null,null)},i.inherits(proto.sim_server.SimulationResultResponse,s.Message),i.DEBUG&&!COMPILED&&(proto.sim_server.SimulationResultResponse.displayName="proto.sim_server.SimulationResultResponse"),s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.Metadata.prototype.toObject=function(e){return proto.sim_server.Metadata.toObject(e,this)},proto.sim_server.Metadata.toObject=function(e,t){var r={stateId:s.Message.getFieldWithDefault(t,1,0),step:s.Message.getFieldWithDefault(t,2,0),status:s.Message.getFieldWithDefault(t,3,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.sim_server.Metadata.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.Metadata;return proto.sim_server.Metadata.deserializeBinaryFromReader(r,t)},proto.sim_server.Metadata.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=t.readInt64();e.setStateId(r);break;case 2:r=t.readInt64(),e.setStep(r);break;case 3:r=t.readString(),e.setStatus(r);break;default:t.skipField()}return e},proto.sim_server.Metadata.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.Metadata.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.Metadata.serializeBinaryToWriter=function(e,t){var r=void 0;0!==(r=e.getStateId())&&t.writeInt64(1,r),0!==(r=e.getStep())&&t.writeInt64(2,r),(r=e.getStatus()).length>0&&t.writeString(3,r)},proto.sim_server.Metadata.prototype.getStateId=function(){return s.Message.getFieldWithDefault(this,1,0)},proto.sim_server.Metadata.prototype.setStateId=function(e){return s.Message.setProto3IntField(this,1,e)},proto.sim_server.Metadata.prototype.getStep=function(){return s.Message.getFieldWithDefault(this,2,0)},proto.sim_server.Metadata.prototype.setStep=function(e){return s.Message.setProto3IntField(this,2,e)},proto.sim_server.Metadata.prototype.getStatus=function(){return s.Message.getFieldWithDefault(this,3,"")},proto.sim_server.Metadata.prototype.setStatus=function(e){return s.Message.setProto3StringField(this,3,e)},proto.sim_server.Vector3D.repeatedFields_=[1],s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.Vector3D.prototype.toObject=function(e){return proto.sim_server.Vector3D.toObject(e,this)},proto.sim_server.Vector3D.toObject=function(e,t){var r={vec2dList:s.Message.toObjectList(t.getVec2dList(),proto.sim_server.Vector2D.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.sim_server.Vector3D.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.Vector3D;return proto.sim_server.Vector3D.deserializeBinaryFromReader(r,t)},proto.sim_server.Vector3D.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=new proto.sim_server.Vector2D;t.readMessage(r,proto.sim_server.Vector2D.deserializeBinaryFromReader),e.addVec2d(r);break;default:t.skipField()}return e},proto.sim_server.Vector3D.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.Vector3D.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.Vector3D.serializeBinaryToWriter=function(e,t){var r;(r=e.getVec2dList()).length>0&&t.writeRepeatedMessage(1,r,proto.sim_server.Vector2D.serializeBinaryToWriter)},proto.sim_server.Vector3D.prototype.getVec2dList=function(){return s.Message.getRepeatedWrapperField(this,proto.sim_server.Vector2D,1)},proto.sim_server.Vector3D.prototype.setVec2dList=function(e){return s.Message.setRepeatedWrapperField(this,1,e)},proto.sim_server.Vector3D.prototype.addVec2d=function(e,t){return s.Message.addToRepeatedWrapperField(this,1,e,proto.sim_server.Vector2D,t)},proto.sim_server.Vector3D.prototype.clearVec2dList=function(){return this.setVec2dList([])},proto.sim_server.Vector2D.repeatedFields_=[1],s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.Vector2D.prototype.toObject=function(e){return proto.sim_server.Vector2D.toObject(e,this)},proto.sim_server.Vector2D.toObject=function(e,t){var r,i={vec1dList:null==(r=s.Message.getRepeatedField(t,1))?void 0:r};return e&&(i.$jspbMessageInstance=t),i}),proto.sim_server.Vector2D.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.Vector2D;return proto.sim_server.Vector2D.deserializeBinaryFromReader(r,t)},proto.sim_server.Vector2D.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:for(var r=t.isDelimited()?t.readPackedUint32():[t.readUint32()],s=0;s<r.length;s++)e.addVec1d(r[s]);break;default:t.skipField()}return e},proto.sim_server.Vector2D.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.Vector2D.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.Vector2D.serializeBinaryToWriter=function(e,t){var r;(r=e.getVec1dList()).length>0&&t.writePackedUint32(1,r)},proto.sim_server.Vector2D.prototype.getVec1dList=function(){return s.Message.getRepeatedField(this,1)},proto.sim_server.Vector2D.prototype.setVec1dList=function(e){return s.Message.setField(this,1,e||[])},proto.sim_server.Vector2D.prototype.addVec1d=function(e,t){return s.Message.addToRepeatedField(this,1,e,t)},proto.sim_server.Vector2D.prototype.clearVec1dList=function(){return this.setVec1dList([])},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.GridDimensions.prototype.toObject=function(e){return proto.sim_server.GridDimensions.toObject(e,this)},proto.sim_server.GridDimensions.toObject=function(e,t){var r={xMax:s.Message.getFieldWithDefault(t,1,0),yMax:s.Message.getFieldWithDefault(t,2,0),zMax:s.Message.getFieldWithDefault(t,3,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.sim_server.GridDimensions.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.GridDimensions;return proto.sim_server.GridDimensions.deserializeBinaryFromReader(r,t)},proto.sim_server.GridDimensions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=t.readInt64();e.setXMax(r);break;case 2:r=t.readInt64(),e.setYMax(r);break;case 3:r=t.readInt64(),e.setZMax(r);break;default:t.skipField()}return e},proto.sim_server.GridDimensions.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.GridDimensions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.GridDimensions.serializeBinaryToWriter=function(e,t){var r=void 0;0!==(r=e.getXMax())&&t.writeInt64(1,r),0!==(r=e.getYMax())&&t.writeInt64(2,r),0!==(r=e.getZMax())&&t.writeInt64(3,r)},proto.sim_server.GridDimensions.prototype.getXMax=function(){return s.Message.getFieldWithDefault(this,1,0)},proto.sim_server.GridDimensions.prototype.setXMax=function(e){return s.Message.setProto3IntField(this,1,e)},proto.sim_server.GridDimensions.prototype.getYMax=function(){return s.Message.getFieldWithDefault(this,2,0)},proto.sim_server.GridDimensions.prototype.setYMax=function(e){return s.Message.setProto3IntField(this,2,e)},proto.sim_server.GridDimensions.prototype.getZMax=function(){return s.Message.getFieldWithDefault(this,3,0)},proto.sim_server.GridDimensions.prototype.setZMax=function(e){return s.Message.setProto3IntField(this,3,e)},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.InitializeRequest.prototype.toObject=function(e){return proto.sim_server.InitializeRequest.toObject(e,this)},proto.sim_server.InitializeRequest.toObject=function(e,t){var r,s={dimensions:(r=t.getDimensions())&&proto.sim_server.GridDimensions.toObject(e,r)};return e&&(s.$jspbMessageInstance=t),s}),proto.sim_server.InitializeRequest.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.InitializeRequest;return proto.sim_server.InitializeRequest.deserializeBinaryFromReader(r,t)},proto.sim_server.InitializeRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=new proto.sim_server.GridDimensions;t.readMessage(r,proto.sim_server.GridDimensions.deserializeBinaryFromReader),e.setDimensions(r);break;default:t.skipField()}return e},proto.sim_server.InitializeRequest.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.InitializeRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.InitializeRequest.serializeBinaryToWriter=function(e,t){var r;null!=(r=e.getDimensions())&&t.writeMessage(1,r,proto.sim_server.GridDimensions.serializeBinaryToWriter)},proto.sim_server.InitializeRequest.prototype.getDimensions=function(){return s.Message.getWrapperField(this,proto.sim_server.GridDimensions,1)},proto.sim_server.InitializeRequest.prototype.setDimensions=function(e){return s.Message.setWrapperField(this,1,e)},proto.sim_server.InitializeRequest.prototype.clearDimensions=function(){return this.setDimensions(void 0)},proto.sim_server.InitializeRequest.prototype.hasDimensions=function(){return null!=s.Message.getField(this,1)},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.StepRequest.prototype.toObject=function(e){return proto.sim_server.StepRequest.toObject(e,this)},proto.sim_server.StepRequest.toObject=function(e,t){var r={worldStateId:s.Message.getFieldWithDefault(t,1,0),rule:t.getRule_asB64(),numSteps:s.Message.getFieldWithDefault(t,3,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.sim_server.StepRequest.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.StepRequest;return proto.sim_server.StepRequest.deserializeBinaryFromReader(r,t)},proto.sim_server.StepRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=t.readInt64();e.setWorldStateId(r);break;case 2:r=t.readBytes(),e.setRule(r);break;case 3:r=t.readInt64(),e.setNumSteps(r);break;default:t.skipField()}return e},proto.sim_server.StepRequest.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.StepRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.StepRequest.serializeBinaryToWriter=function(e,t){var r=void 0;0!==(r=e.getWorldStateId())&&t.writeInt64(1,r),(r=e.getRule_asU8()).length>0&&t.writeBytes(2,r),null!=(r=s.Message.getField(e,3))&&t.writeInt64(3,r)},proto.sim_server.StepRequest.prototype.getWorldStateId=function(){return s.Message.getFieldWithDefault(this,1,0)},proto.sim_server.StepRequest.prototype.setWorldStateId=function(e){return s.Message.setProto3IntField(this,1,e)},proto.sim_server.StepRequest.prototype.getRule=function(){return s.Message.getFieldWithDefault(this,2,"")},proto.sim_server.StepRequest.prototype.getRule_asB64=function(){return s.Message.bytesAsB64(this.getRule())},proto.sim_server.StepRequest.prototype.getRule_asU8=function(){return s.Message.bytesAsU8(this.getRule())},proto.sim_server.StepRequest.prototype.setRule=function(e){return s.Message.setProto3BytesField(this,2,e)},proto.sim_server.StepRequest.prototype.getNumSteps=function(){return s.Message.getFieldWithDefault(this,3,0)},proto.sim_server.StepRequest.prototype.setNumSteps=function(e){return s.Message.setField(this,3,e)},proto.sim_server.StepRequest.prototype.clearNumSteps=function(){return s.Message.setField(this,3,void 0)},proto.sim_server.StepRequest.prototype.hasNumSteps=function(){return null!=s.Message.getField(this,3)},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.WorldStateResponse.prototype.toObject=function(e){return proto.sim_server.WorldStateResponse.toObject(e,this)},proto.sim_server.WorldStateResponse.toObject=function(e,t){var r,s={metadata:(r=t.getMetadata())&&proto.sim_server.Metadata.toObject(e,r),state:(r=t.getState())&&proto.sim_server.Vector3D.toObject(e,r)};return e&&(s.$jspbMessageInstance=t),s}),proto.sim_server.WorldStateResponse.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.WorldStateResponse;return proto.sim_server.WorldStateResponse.deserializeBinaryFromReader(r,t)},proto.sim_server.WorldStateResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=new proto.sim_server.Metadata;t.readMessage(r,proto.sim_server.Metadata.deserializeBinaryFromReader),e.setMetadata(r);break;case 2:r=new proto.sim_server.Vector3D,t.readMessage(r,proto.sim_server.Vector3D.deserializeBinaryFromReader),e.setState(r);break;default:t.skipField()}return e},proto.sim_server.WorldStateResponse.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.WorldStateResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.WorldStateResponse.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getMetadata())&&t.writeMessage(1,r,proto.sim_server.Metadata.serializeBinaryToWriter),null!=(r=e.getState())&&t.writeMessage(2,r,proto.sim_server.Vector3D.serializeBinaryToWriter)},proto.sim_server.WorldStateResponse.prototype.getMetadata=function(){return s.Message.getWrapperField(this,proto.sim_server.Metadata,1)},proto.sim_server.WorldStateResponse.prototype.setMetadata=function(e){return s.Message.setWrapperField(this,1,e)},proto.sim_server.WorldStateResponse.prototype.clearMetadata=function(){return this.setMetadata(void 0)},proto.sim_server.WorldStateResponse.prototype.hasMetadata=function(){return null!=s.Message.getField(this,1)},proto.sim_server.WorldStateResponse.prototype.getState=function(){return s.Message.getWrapperField(this,proto.sim_server.Vector3D,2)},proto.sim_server.WorldStateResponse.prototype.setState=function(e){return s.Message.setWrapperField(this,2,e)},proto.sim_server.WorldStateResponse.prototype.clearState=function(){return this.setState(void 0)},proto.sim_server.WorldStateResponse.prototype.hasState=function(){return null!=s.Message.getField(this,2)},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.StartSimulationRequest.prototype.toObject=function(e){return proto.sim_server.StartSimulationRequest.toObject(e,this)},proto.sim_server.StartSimulationRequest.toObject=function(e,t){var r,i={initReq:(r=t.getInitReq())&&proto.sim_server.InitializeRequest.toObject(e,r),stepReq:(r=t.getStepReq())&&proto.sim_server.StepRequest.toObject(e,r),timeout:s.Message.getFieldWithDefault(t,3,0)};return e&&(i.$jspbMessageInstance=t),i}),proto.sim_server.StartSimulationRequest.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.StartSimulationRequest;return proto.sim_server.StartSimulationRequest.deserializeBinaryFromReader(r,t)},proto.sim_server.StartSimulationRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=new proto.sim_server.InitializeRequest;t.readMessage(r,proto.sim_server.InitializeRequest.deserializeBinaryFromReader),e.setInitReq(r);break;case 2:r=new proto.sim_server.StepRequest,t.readMessage(r,proto.sim_server.StepRequest.deserializeBinaryFromReader),e.setStepReq(r);break;case 3:r=t.readInt64(),e.setTimeout(r);break;default:t.skipField()}return e},proto.sim_server.StartSimulationRequest.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.StartSimulationRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.StartSimulationRequest.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getInitReq())&&t.writeMessage(1,r,proto.sim_server.InitializeRequest.serializeBinaryToWriter),null!=(r=e.getStepReq())&&t.writeMessage(2,r,proto.sim_server.StepRequest.serializeBinaryToWriter),null!=(r=s.Message.getField(e,3))&&t.writeInt64(3,r)},proto.sim_server.StartSimulationRequest.prototype.getInitReq=function(){return s.Message.getWrapperField(this,proto.sim_server.InitializeRequest,1)},proto.sim_server.StartSimulationRequest.prototype.setInitReq=function(e){return s.Message.setWrapperField(this,1,e)},proto.sim_server.StartSimulationRequest.prototype.clearInitReq=function(){return this.setInitReq(void 0)},proto.sim_server.StartSimulationRequest.prototype.hasInitReq=function(){return null!=s.Message.getField(this,1)},proto.sim_server.StartSimulationRequest.prototype.getStepReq=function(){return s.Message.getWrapperField(this,proto.sim_server.StepRequest,2)},proto.sim_server.StartSimulationRequest.prototype.setStepReq=function(e){return s.Message.setWrapperField(this,2,e)},proto.sim_server.StartSimulationRequest.prototype.clearStepReq=function(){return this.setStepReq(void 0)},proto.sim_server.StartSimulationRequest.prototype.hasStepReq=function(){return null!=s.Message.getField(this,2)},proto.sim_server.StartSimulationRequest.prototype.getTimeout=function(){return s.Message.getFieldWithDefault(this,3,0)},proto.sim_server.StartSimulationRequest.prototype.setTimeout=function(e){return s.Message.setField(this,3,e)},proto.sim_server.StartSimulationRequest.prototype.clearTimeout=function(){return s.Message.setField(this,3,void 0)},proto.sim_server.StartSimulationRequest.prototype.hasTimeout=function(){return null!=s.Message.getField(this,3)},s.Message.GENERATE_TO_OBJECT&&(proto.sim_server.SimulationResultResponse.prototype.toObject=function(e){return proto.sim_server.SimulationResultResponse.toObject(e,this)},proto.sim_server.SimulationResultResponse.toObject=function(e,t){var r,i={startState:(r=t.getStartState())&&proto.sim_server.WorldStateResponse.toObject(e,r),endState:(r=t.getEndState())&&proto.sim_server.WorldStateResponse.toObject(e,r),stateChangedDuringSim:s.Message.getBooleanFieldWithDefault(t,3,!1)};return e&&(i.$jspbMessageInstance=t),i}),proto.sim_server.SimulationResultResponse.deserializeBinary=function(e){var t=new s.BinaryReader(e),r=new proto.sim_server.SimulationResultResponse;return proto.sim_server.SimulationResultResponse.deserializeBinaryFromReader(r,t)},proto.sim_server.SimulationResultResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var r=new proto.sim_server.WorldStateResponse;t.readMessage(r,proto.sim_server.WorldStateResponse.deserializeBinaryFromReader),e.setStartState(r);break;case 2:r=new proto.sim_server.WorldStateResponse,t.readMessage(r,proto.sim_server.WorldStateResponse.deserializeBinaryFromReader),e.setEndState(r);break;case 3:r=t.readBool(),e.setStateChangedDuringSim(r);break;default:t.skipField()}return e},proto.sim_server.SimulationResultResponse.prototype.serializeBinary=function(){var e=new s.BinaryWriter;return proto.sim_server.SimulationResultResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.sim_server.SimulationResultResponse.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getStartState())&&t.writeMessage(1,r,proto.sim_server.WorldStateResponse.serializeBinaryToWriter),null!=(r=e.getEndState())&&t.writeMessage(2,r,proto.sim_server.WorldStateResponse.serializeBinaryToWriter),(r=e.getStateChangedDuringSim())&&t.writeBool(3,r)},proto.sim_server.SimulationResultResponse.prototype.getStartState=function(){return s.Message.getWrapperField(this,proto.sim_server.WorldStateResponse,1)},proto.sim_server.SimulationResultResponse.prototype.setStartState=function(e){return s.Message.setWrapperField(this,1,e)},proto.sim_server.SimulationResultResponse.prototype.clearStartState=function(){return this.setStartState(void 0)},proto.sim_server.SimulationResultResponse.prototype.hasStartState=function(){return null!=s.Message.getField(this,1)},proto.sim_server.SimulationResultResponse.prototype.getEndState=function(){return s.Message.getWrapperField(this,proto.sim_server.WorldStateResponse,2)},proto.sim_server.SimulationResultResponse.prototype.setEndState=function(e){return s.Message.setWrapperField(this,2,e)},proto.sim_server.SimulationResultResponse.prototype.clearEndState=function(){return this.setEndState(void 0)},proto.sim_server.SimulationResultResponse.prototype.hasEndState=function(){return null!=s.Message.getField(this,2)},proto.sim_server.SimulationResultResponse.prototype.getStateChangedDuringSim=function(){return s.Message.getBooleanFieldWithDefault(this,3,!1)},proto.sim_server.SimulationResultResponse.prototype.setStateChangedDuringSim=function(e){return s.Message.setProto3BooleanField(this,3,e)},i.object.extend(t,proto.sim_server)},459:e=>{"use strict";e.exports=require("google-protobuf")},282:e=>{"use strict";e.exports=require("grpc-web")}},t={};function r(s){var i=t[s];if(void 0!==i)return i.exports;var o=t[s]={exports:{}};return e[s].call(o.exports,o,o.exports,r),o.exports}(()=>{"use strict";var e=r(157),t=r(617),s=new e.StateServiceClient("http://localhost:50051",null,null),i=new t.StartSimulationRequest,o=new t.InitializeRequest,n=new t.GridDimensions;n.setXMax(10),n.setYMax(10),n.setZMax(10),o.setDimensions(n);var a=new t.StepRequest;a.setNumSteps(1e3),a.setRule("ASNFZ4mrze8BI0VniavN7w=="),i.setTimeout(5),i.setInitReq(o),i.setStepReq(a),s.startSimulation(i).then((function(e){console.log("Received response: "+e.getStateChangedDuringSim())})).catch((function(e){console.log("Received error: "+e.code+", "+e.message)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,